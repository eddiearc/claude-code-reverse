name: TodoWrite
description: >-
  使用此工具为您当前的编程会话创建和管理结构化任务列表。这有助于您跟踪进度、组织复杂任务并向用户展示彻底性。
  它也帮助用户了解任务进度和他们请求的整体进度。

  ## 何时使用此工具
  在以下场景中主动使用此工具：

  1. 复杂多步骤任务 - 当任务需要3个或更多不同步骤或操作时
  2. 非平凡和复杂的任务 - 需要仔细规划或多个操作的任务
  3. 用户明确请求待办事项列表 - 当用户直接要求您使用待办事项列表时
  4. 用户提供多个任务 - 当用户提供要完成的事项列表时（编号或逗号分隔）
  5. 收到新指令后 - 立即将用户要求作为待办事项捕获
  6. 开始处理任务时 - 在开始工作之前将其标记为in_progress。理想情况下，您应该一次只有一个待办事项为in_progress
  7. 完成任务后 - 将其标记为completed并添加在实施过程中发现的任何新后续任务

  ## 何时不使用此工具

  在以下情况下跳过使用此工具：
  1. 只有一个简单的任务
  2. 任务是平凡的，跟踪它不会带来组织上的好处
  3. 任务可以在少于3个平凡步骤中完成
  4. 任务纯粹是对话式或信息性的

  注意，如果只有一个平凡任务要做，您不应该使用此工具。在这种情况下，您最好直接完成任务。

  ## 何时使用待办事项列表的示例

  <example>
  User: 我想在应用程序设置中添加一个深色模式切换。确保完成后运行测试和构建！
  Assistant: 我将帮您在应用程序设置中添加深色模式切换。让我创建一个待办事项列表来跟踪此实现。
  *创建包含以下项目的待办事项列表：*
  1. 在设置页面创建深色模式切换组件
  2. 添加深色模式状态管理（context/store）
  3. 为深色主题实现CSS-in-JS样式
  4. 更新现有组件以支持主题切换
  5. 运行测试和构建过程，处理出现的任何故障或错误
  *开始处理第一个任务*

  <reasoning>
  助手使用待办事项列表的原因：
  1. 添加深色模式是一个需要UI、状态管理和样式更改的多步骤功能
  2. 用户明确要求之后运行测试和构建
  3. 助手推断测试和构建需要通过，添加了"确保测试和构建成功"作为最终任务
  </reasoning>
  </example>

  <example>
  User: 帮我将函数getCwd重命名为getCurrentWorkingDirectory，在整个项目中
  Assistant: 让我首先搜索您的代码库以找到'getCwd'的所有出现。
  *使用grep或搜索工具定位代码库中getCwd的所有实例*
  Assistant: 我在8个不同文件中找到了15个'getCwd'实例。让我创建一个待办事项列表来跟踪这些更改。
  *创建包含每个需要更新的文件的特定项目的待办事项列表*

  <reasoning>
  助手使用待办事项列表的原因：
  1. 首先，助手搜索以了解任务的范围
  2. 在不同文件中发现多个出现后，确定这是一个具有多个步骤的复杂任务
  3. 待办事项列表有助于确保系统地跟踪和更新每个实例
  4. 这种方法防止遗漏任何出现并保持代码一致性
  </reasoning>
  </example>

  <example>
  User: 我需要为我的电子商务网站实现这些功能：用户注册、产品目录、购物车和结账流程。
  Assistant: 我将帮您实现这些功能。首先，让我们将所有功能添加到待办事项列表中。
  *创建一个待办事项列表，根据项目架构将每个功能分解为特定任务*
  Assistant: 让我们从用户注册开始。这将涉及创建数据库模型、API端点和与您现有身份验证系统集成的前端表单。

  <reasoning>
  助手使用待办事项列表的原因：
  1. 用户在逗号分隔的列表中提供了多个复杂功能来实现
  2. 待办事项列表有助于将这些大功能组织成可管理的任务
  3. 这种方法允许跟踪整个实现过程中的进度
  </reasoning>
  </example>

  <example>
  User: 您能帮忙优化我的React应用程序吗？它渲染缓慢并有性能问题。</user>
  Assistant: 我将帮您优化React应用程序。首先，让我检查您的代码库以识别潜在的性能瓶颈。
  *审查组件结构、渲染模式、状态管理和数据获取*
  Assistant: 在分析您的代码库后，我发现了几个性能问题。让我创建一个待办事项列表来跟踪我们的优化工作。
  *创建包含以下项目的待办事项列表：1) 在ProductList中为昂贵计算实现记忆化，2) 在Dashboard中为长列表添加虚拟化，3) 在Gallery组件中优化图像加载，4) 修复ShoppingCart中的状态更新循环，5) 审查包大小并实现代码分割*
  让我们从在您的ProductList组件中为昂贵计算实现记忆化开始。</assistant>

  <reasoning>
  助手使用待办事项列表的原因：
  1. 首先，助手检查代码库以识别特定的性能问题
  2. 基于此分析，它识别了多个优化机会
  3. 性能优化是一个需要多个步骤的非平凡任务
  4. 待办事项列表有助于系统地跟踪不同组件的改进
  5. 这种系统性方法确保解决所有性能瓶颈
  </reasoning>
  </example>

  ## 何时不使用待办事项列表的示例

  <example>
  User: 如何在Python中打印'Hello World'？
  Assistant: 在Python中，您可以用这个简单的代码打印"Hello World"：

  python
  print("Hello World")

  这将在执行时将文本"Hello World"输出到控制台。</assistant>

  <reasoning>
  助手没有使用待办事项列表，因为这是一个可以一步完成的单一、平凡任务。对于这样直接的请求，没有必要跟踪多个任务或步骤。
  </reasoning>
  </example>

  <example>
  User: git status命令有什么作用？
  Assistant: git status命令显示您的工作目录和暂存区的当前状态。它显示哪些更改已被暂存、哪些没有，以及哪些文件没有被Git跟踪。这是在进行提交之前了解仓库当前状态的基本命令。

  <reasoning>
  助手没有使用待办事项列表，因为这是一个没有实际编程任务要完成的信息请求。用户只是在寻求解释，不是要助手执行多个步骤或任务。
  </reasoning>
  </example>

  <example>
  User: 您能给calculateTotal函数添加注释来解释它的作用吗？
  Assistant: 当然，让我给calculateTotal函数添加注释来解释它的作用。
  * 使用Edit工具给calculateTotal函数添加注释 *

  <reasoning>
  助手没有使用待办事项列表，因为这是一个限制在代码中一个位置的单一、直接任务。添加注释不需要跟踪多个步骤或系统性组织。
  </reasoning>
  </example>

  <example>
  User: 为我运行npm install并告诉我发生了什么。
  Assistant: 我将为您运行npm install命令。

  *执行：npm install*

  命令成功完成。输出如下：
  [npm install命令的输出]

  所有依赖项已根据您的package.json文件安装。

  <reasoning>
  助手没有使用待办事项列表，因为这是一个单一命令执行，结果立即可见。没有多个步骤需要跟踪或组织，因此待办事项列表对这个直接任务是不必要的。
  </reasoning>
  </example>

  ## 任务状态和管理

  1. **任务状态**：使用这些状态跟踪进度：
     - pending：任务尚未开始
     - in_progress：当前正在处理（一次限制为一个任务）
     - completed：任务已成功完成

  2. **任务管理**：
     - 在工作时实时更新任务状态
     - 完成后立即将任务标记为完成（不要批量完成）
     - 在任何时候只有一个任务为in_progress
     - 在开始新任务之前完成当前任务
     - 从列表中完全删除不再相关的任务

  3. **任务完成要求**：
     - 只有在完全完成任务时才将其标记为completed
     - 如果遇到错误、阻碍或无法完成，请将任务保持为in_progress
     - 被阻碍时，创建描述需要解决的问题的新任务
     - 如果出现以下情况，永远不要将任务标记为completed：
       - 测试失败
       - 实现不完整
       - 遇到未解决的错误
       - 找不到必要的文件或依赖项

  4. **任务分解**：
     - 创建具体、可操作的项目
     - 将复杂任务分解为更小、可管理的步骤
     - 使用清晰、描述性的任务名称

  如有疑问，请使用此工具。主动的任务管理展现了专注性，确保您成功完成所有要求。
input_schema:
  type: object
  properties:
    todos:
      type: array
      items:
        type: object
        properties:
          content:
            type: string
            minLength: 1
          status:
            type: string
            enum:
              - pending
              - in_progress
              - completed
          priority:
            type: string
            enum:
              - high
              - medium
              - low
          id:
            type: string
        required:
          - content
          - status
          - priority
          - id
        additionalProperties: false
      description: 更新的待办事项列表
  required:
    - todos
  additionalProperties: false
  $schema: http://json-schema.org/draft-07/schema#