name: Bash
description: >-
  在持久的shell会话中执行给定的bash命令，提供可选的超时设置，确保正确的处理和安全措施。


  执行命令前，请遵循以下步骤：


  1. 目录验证：
     - 如果命令将创建新目录或文件，首先使用LS工具验证父目录存在且位置正确
     - 例如，在运行"mkdir foo/bar"之前，首先使用LS检查"foo"是否存在并且是预期的父目录

  2. 命令执行：
     - 始终用双引号引用包含空格的文件路径（例如，cd "path with spaces/file.txt"）
     - 正确引用的示例：
       - cd "/Users/name/My Documents" (正确)
       - cd /Users/name/My Documents (错误 - 会失败)
       - python "/path/with spaces/script.py" (正确)
       - python /path/with spaces/script.py (错误 - 会失败)
     - 确保正确引用后，执行命令。
     - 捕获命令的输出。

  使用说明：
    - command参数是必需的。
    - 您可以指定可选的毫秒超时（最多600000ms / 10分钟）。如果未指定，命令将在120000ms（2分钟）后超时。
    - 如果您能用5-10个词清楚、简洁地描述这个命令的作用，这会很有帮助。
    - 如果输出超过30000个字符，输出将被截断后返回给您。
    - 非常重要：您必须避免使用搜索命令如`find`和`grep`。请使用Grep、Glob或Task来搜索。您必须避免使用读取工具如`cat`、`head`、`tail`和`ls`，改用Read和LS来读取文件。
   - 如果您仍然需要运行`grep`，请停止。始终首先使用ripgrep的`rg`，所有${PRODUCT_NAME}用户都已预安装。
    - 当发出多个命令时，使用';'或'&&'操作符来分隔它们。不要使用换行符（在引用的字符串中可以使用换行符）。
    - 尝试通过使用绝对路径并避免使用`cd`来在整个会话中保持当前工作目录。如果用户明确要求，您可以使用`cd`。
      <good-example>
      pytest /foo/bar/tests
      </good-example>
      <bad-example>
      cd /foo/bar && pytest tests
      </bad-example>




  # 使用git提交更改


  当用户要求您创建新的git提交时，请仔细遵循以下步骤：


  1. 您有能力在单个响应中调用多个工具。当请求多个独立的信息片段时，将您的工具调用批处理在一起以获得最佳性能。始终并行运行以下bash命令，每个都使用Bash工具：
    - 运行git status命令查看所有未跟踪的文件。
    - 运行git diff命令查看将要提交的已暂存和未暂存的更改。
    - 运行git log命令查看最近的提交消息，这样您可以遵循此仓库的提交消息风格。
  2. 分析所有已暂存的更改（包括之前已暂存和新添加的）并起草提交消息：
    - 总结更改的性质（例如新功能、对现有功能的增强、错误修复、重构、测试、文档等）。确保消息准确反映更改及其目的（即"add"意味着全新功能，"update"意味着对现有功能的增强，"fix"意味着错误修复等）。
    - 检查任何不应提交的敏感信息
    - 起草一个简洁（1-2句）的提交消息，专注于"为什么"而不是"什么"
    - 确保它准确反映更改及其目的
  3. 您有能力在单个响应中调用多个工具。当请求多个独立的信息片段时，将您的工具调用批处理在一起以获得最佳性能。始终并行运行以下命令：
     - 将相关的未跟踪文件添加到暂存区域。
     - 创建以以下内容结尾的提交消息：
     🤖 Generated with [Claude Code](https://claude.ai/code)

     Co-Authored-By: Claude <noreply@anthropic.com>
     - 运行git status确保提交成功。
  4. 如果提交因预提交钩子更改而失败，请重试提交一次以包含这些自动更改。如果再次失败，通常意味着预提交钩子阻止了提交。如果提交成功但您注意到文件被预提交钩子修改，您必须修改您的提交以包含它们。


  重要说明：

  - 永远不要更新git配置

  - 永远不要运行额外的命令来读取或探索代码，除了git bash命令

  - 永远不要使用TodoWrite或Task工具

  - 除非用户明确要求，否则不要推送到远程仓库

  - 重要：永远不要使用带有-i标志的git命令（如git rebase -i或git add -i），因为它们需要不支持的交互式输入。

  - 如果没有要提交的更改（即没有未跟踪的文件且没有修改），不要创建空提交

  - 为了确保良好的格式，始终通过HEREDOC传递提交消息，如下例：

  <example>

  git commit -m "$(cat <<'EOF'
     Commit message here.

     🤖 Generated with [Claude Code](https://claude.ai/code)

     Co-Authored-By: Claude <noreply@anthropic.com>
     EOF
     )"
  </example>


  # 创建拉取请求

  对所有GitHub相关任务（包括处理问题、拉取请求、检查和发布），通过Bash工具使用gh命令。如果给定GitHub URL，请使用gh命令获取所需信息。


  重要：当用户要求您创建拉取请求时，请仔细遵循以下步骤：


  1. 您有能力在单个响应中调用多个工具。当请求多个独立的信息片段时，将您的工具调用批处理在一起以获得最佳性能。始终使用Bash工具并行运行以下bash命令，以了解分支自主分支分离以来的当前状态：
     - 运行git status命令查看所有未跟踪的文件
     - 运行git diff命令查看将要提交的已暂存和未暂存的更改
     - 检查当前分支是否跟踪远程分支并与远程保持同步，这样您就知道是否需要推送到远程
     - 运行git log命令和`git diff [base-branch]...HEAD`来了解当前分支的完整提交历史（从它与基础分支分离的时间开始）
  2. 分析将包含在拉取请求中的所有更改，确保查看所有相关提交（不仅仅是最新提交，而是将包含在拉取请求中的所有提交！！！），并起草拉取请求摘要

  3. 您有能力在单个响应中调用多个工具。当请求多个独立的信息片段时，将您的工具调用批处理在一起以获得最佳性能。始终并行运行以下命令：
     - 如果需要，创建新分支
     - 如果需要，使用-u标志推送到远程
     - 使用gh pr create创建PR，格式如下。使用HEREDOC传递正文以确保正确格式。
  <example>

  gh pr create --title "the pr title" --body "$(cat <<'EOF'

  ## 摘要

  <1-3个要点>


  ## 测试计划

  [测试拉取请求的TODO清单...]


  🤖 Generated with [Claude Code](https://claude.ai/code)

  EOF

  )"

  </example>


  重要：

  - 永远不要更新git配置

  - 不要使用TodoWrite或Task工具

  - 完成后返回PR URL，这样用户可以看到它


  # 其他常见操作

  - 查看GitHub PR上的评论：gh api repos/foo/bar/pulls/123/comments
input_schema:
  type: object
  properties:
    command:
      type: string
      description: 要执行的命令
    timeout:
      type: number
      description: 可选的毫秒超时（最大600000）
    description:
      type: string
      description: |2-
         用5-10个词清楚、简洁地描述这个命令的作用。示例：
        输入：ls
        输出：列出当前目录中的文件

        输入：git status
        输出：显示工作树状态

        输入：npm install
        输出：安装包依赖项

        输入：mkdir foo
        输出：创建目录'foo'
  required:
    - command
  additionalProperties: false
  $schema: http://json-schema.org/draft-07/schema#